// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4b\x8f\xdb\xc8\x11\xbe\xcf\xaf\x28\x30\x01\x72\xf1\x8e\xbc\xce\x65\x31\x97\xc4\x98\x01\xd6\x83\xf5\x6c\x8c\x75\x62\x1f\x12\x43\x28\x91\x25\xb2\x2c\xb2\x9b\xee\x6e\x4a\x51\x82\xf9\xef\x41\x35\x49\xf1\x21\x52\x4f\x8f\x2d\xaf\xe3\x8b\x6d\x75\x57\xd7\xeb\xeb\x7a\xb5\xf4\xdf\x2b\x80\xc0\xae\x30\x8e\xc9\x04\x37\x10\xbc\xb8\x7e\x1e\x3c\x93\xcf\x58\xcd\x75\x70\x03\xb2\x0e\x10\x38\x76\x29\xc9\xfa\x6d\x5a\x58\x47\x06\x1e\x50\x61\x4c\x06\xde\x3d\xbc\x47\x43\xf0\x8a\xd2\x9c\x0c\xbc\x7c\x73\xef\xa9\x01\x82\x25\x19\xcb\x5a\x09\xcd\xf2\xf9\xf5\x8f\xd5\xb1\x00\x41\xa8\x95\xc3\xd0\x6d\xce\x06\x08\x14\x66\xfe\xf0\x07\x0e\x13\xa4\x14\xde\x91\xa2\xff\x30\x56\x14\x00\x41\x61\x52\x59\x4f\x9c\xcb\xed\xcd\x64\x12\xb3\x4b\x8a\xd9\x75\xa8\xb3\x89\xc5\xcc\x16\x2a\xfe\x21\x54\xa1\x9b\x84\x19\xfe\xb0\xcc\x56\x68\xa8\x21\xa5\x0c\xd9\x13\x67\xcb\xf2\xd4\xbf\xc6\xf2\x89\x10\x07\x7e\xcf\xe3\x15\xc0\xa3\x57\xd9\x86\x09\x65\x64\x83\x1b\xf8\x67\x29\xaa\xe7\x57\xcb\x2d\xff\x11\x8a\x0f\x7e\x6f\xa8\x95\x2d\x3a\x9b\x31\xcf\x53\x0e\xd1\xb1\x56\x93\x8f\x56\xab\x66\x6f\x6e\x74\x54\x84\x07\xee\x45\x97\xd8\xc6\xee\x13\xcc\x79\xb2\xfc\x71\x12\x96\x66\x6f\x1b\x2d\xa6\xb6\x0d\x45\xfc\x22\xcb\xd0\xac\x45\xd7\xf7\x9c\xa6\x60\xc8\x19\xa6\x25\x81\x4b\x08\xac\x43\x57\x58\xd0\x73\x40\xa8\x0e\x03\x54\x11\xb0\xb3\xb0\x28\x66\x14\x6a\x35\xe7\x18\xe6\xda\x40\xa8\x95\xa2\xd0\xf1\x92\xdd\x7a\x63\x47\x80\x40\xe7\x64\xbc\xc8\xf7\x91\xf0\xf8\x99\x5c\x05\x86\xf6\x26\x43\x36\xd7\xca\x92\xed\xc8\x06\x10\xbc\x78\xfe\xbc\xf7\x11\x40\x10\x91\x0d\x0d\xe7\xae\x02\x4a\xeb\xa0\x52\x23\x71\x08\x6e\x91\x01\x04\x7f\x34\x34\x17\x8a\x3f\x4c\x22\x9a\xb3\x62\x39\xc1\x8a\xff\x4b\xf7\x37\xb2\xfd\x46\x79\xba\x0e\x3a\xe4\x8f\x57\x43\xff\x7e\x6c\x29\x91\xa3\xc1\x8c\x1c\x99\xc6\x65\xe5\x9f\x9e\xf8\x35\x6e\xfd\xdf\xcf\x76\xaa\xf6\x2b\x66\x24\xd6\x17\x5f\xd4\xf6\x77\x1a\x66\x04\xa9\xd6\x0b\x8a\xa0\xc8\xaf\xfb\x47\xb0\xa7\xfc\x54\x90\x59\xf7\x97\x0c\x7d\x2a\xd8\x90\x38\x62\x8e\xa9\xa5\xde\xb2\x5b\xe7\x5e\x30\xeb\x0c\xab\x38\x18\x54\xf8\x43\x4b\x61\x87\x71\x5f\xd5\xfa\xa6\x37\xc4\x1f\xae\x7a\x96\x0a\x22\x4a\xc9\xd1\x6e\x14\x96\x7b\x1a\xd4\xed\x40\xd4\x9d\xdf\x7a\xb1\xa0\xea\x88\x77\x29\xb8\x7a\x9f\xa0\x03\xb6\x6d\x5c\xfd\xc9\x82\x10\x0a\xbc\x22\xb2\xce\xe8\xf5\xb7\x87\xac\x5c\xdb\x3d\xd1\x2d\x37\x7a\xc9\x92\x61\x0e\x82\xd6\xad\x21\xbc\x60\x68\x75\xc4\xfb\x22\xd0\x9a\xe9\x68\xcb\xf5\x25\x2a\x86\x56\x5a\xa0\x70\xa6\xe8\x63\xe2\xf3\xa8\xfd\x60\xe3\x43\x94\xfe\x1c\xe0\x2a\xf6\x60\x0b\xa3\x8f\x85\x75\x80\x47\x82\xec\xa5\x27\xab\x04\xf8\x55\x47\x64\x2f\x0f\x69\x1d\x19\xbf\x1f\xa4\x75\xd4\x7e\x72\xa4\x5d\xb5\x6c\xd6\x2f\xe1\x26\x29\x77\x42\xdb\x11\x75\x1c\x82\xd0\x4a\x15\x51\x9d\x65\x0f\x2a\xcf\x5e\x0b\xc3\x8b\x03\x62\x57\xbe\x93\x90\xf8\x19\x9d\x52\xe4\xb1\xc1\x88\x8e\xf5\x4b\x61\x14\x54\xa4\xa0\xbd\x8d\xac\x2f\xa1\x11\x62\x5e\x92\x3a\x20\x66\xfc\x4c\xee\x1f\xe5\x01\x95\xe4\xf7\x6a\xae\x4d\xe6\x77\x5c\xa4\xd3\x46\xa5\xbd\xe0\x8a\x08\x9c\x7c\xb6\x22\x90\x56\x55\x3a\x37\x8e\x48\xca\x17\xef\xab\xca\x7f\xdf\x60\x8d\xb4\x37\x8d\x39\x47\x59\xee\xa4\x10\xac\x41\x7a\x48\x1a\xeb\x7a\xf8\xf2\x40\xd8\x95\xef\xfb\xc9\x61\x5d\xbd\xbf\x4e\x12\x6b\xa6\x3a\x47\xc7\xc9\x8a\x14\xb8\x09\x19\x80\x33\x5d\x38\xc0\x9c\xc1\x92\x59\xee\x0b\x94\xef\xca\x13\x2e\x3d\x42\x56\x62\x7e\xb1\x94\xb6\x99\x5f\xb5\x04\x6a\x26\x48\xfd\xca\xa7\x1c\xd8\xfd\x46\x99\x5e\xd2\x03\x86\x09\x2b\x7a\x9b\x53\xd8\xf6\x68\x1d\xbf\xf4\xec\x23\x85\x4d\xe9\x10\xe4\x46\x7c\xe2\xb8\x67\xe2\x20\xe9\x37\x6b\xdb\x31\xf0\x59\x67\xad\x1e\x26\xfe\x3d\x21\x10\x62\x1f\x87\xdf\xbe\x7d\x05\x18\x86\x64\x6d\xa3\xe9\xe3\x20\x18\x7b\x36\x1e\x80\xc5\x19\xca\xc4\xec\xa6\xdb\x28\x3f\x4e\x27\x87\x31\x68\xe5\x33\x50\xcc\x0e\x0c\xe5\xda\xb2\xd3\xa6\x05\x87\xb6\xd3\x85\x65\xa8\xb3\x8c\xcf\xb0\x22\xda\xa4\x1e\x2f\x09\xcb\xea\xb8\x51\x76\xce\x10\x4d\xad\xc3\xde\xf4\xe6\x50\x96\xef\x13\x72\x09\x19\xd0\x06\x94\x76\x9e\xab\x9c\x08\x2b\xb4\x10\xa6\x84\x0a\x56\x09\x29\x98\x15\x9c\x8e\x08\x21\x4b\xd1\x34\x3a\x55\x80\x3b\x74\x7e\x9c\xe6\x8f\x19\x51\x53\x9f\xe5\xc7\x0a\x55\xc2\x24\xd6\x50\x58\x8a\x24\x8f\x86\x3a\xcb\x39\xa5\x61\x8e\xd5\xa2\x39\x89\xdf\x6d\x45\xec\x59\x0d\x9f\x9f\xa7\xe8\x04\xe3\x27\x9d\xff\xa6\x22\x06\x76\xa5\x9b\x4a\x7e\x91\xbf\x7b\x13\x30\x85\x52\x52\x11\x95\xb3\xe8\x8a\xf7\xe0\xed\x1b\xef\xa9\xce\xb8\x75\x55\xa2\x3d\x05\x89\x27\x55\x7b\xc3\x06\xc6\x28\x9a\x2a\xdf\xb7\x8f\x88\x82\xc6\x60\x37\xdd\x07\xec\x28\xeb\xef\xdf\x9f\x26\xca\x28\xdc\x8e\xbf\xed\xd4\x30\xac\x6a\xb5\xdb\xc2\x2a\xe1\x30\x11\x05\x57\xa8\x7c\x75\x87\x91\x07\x67\xcb\x06\xc3\xfa\x19\x1f\xf5\x9f\x56\xc5\x43\xf3\xcd\x39\xfa\x96\x7a\xc0\xdc\xe8\x6c\x44\xe9\x23\x90\x5b\xe6\xe9\x33\xb0\xab\x17\x63\xb6\x9c\x69\x2d\xc1\xb0\x6b\xcd\x32\x4b\x8d\x2e\x37\xc8\x46\x41\x35\x5b\x40\xb0\x85\xcf\x8b\xf3\x42\x8a\xa9\x4f\x05\x59\x77\xb0\xaa\x95\x92\x77\xe4\x90\xd3\x7b\x47\xd9\x39\x9a\x72\x74\xd2\x1d\xbd\xbf\xeb\xbd\x7c\x0c\xa3\xf3\xe4\x18\x30\xf0\xb6\x32\xcc\xa1\x7c\x04\x3b\x3b\xce\x34\x6f\x69\x7b\x39\x36\x4f\x6b\x67\x73\x6d\xbd\xd2\xf9\x44\xe4\x1f\xe9\xc6\xaf\xfd\x41\xb0\xf8\x3f\x20\xbe\x08\x20\xf6\xf8\xa2\x3f\x05\xff\x1a\x79\x74\xfc\x7d\x72\x33\x03\x1f\x2b\x4b\x16\x3f\xd9\x53\x2a\xad\x5e\x07\x26\x55\xec\xb2\xa9\xb9\x7e\x29\x66\x64\x14\x39\x2a\x07\x6a\x2b\x6d\x16\x24\xc5\x66\x44\xf6\x1a\x6e\xb5\x72\x46\xa7\x90\xa7\xa8\x36\x54\xd6\xe7\xfb\x48\xba\xfa\x8c\x15\x45\x30\x5b\x7b\x6d\x5a\x49\xe7\x7a\x58\x81\x84\xe3\x64\x8a\x4b\xe4\x14\x67\x9c\xb2\x5b\x3f\x4d\x3c\xdf\xae\x99\x6b\x43\xb3\x85\x57\x2f\x47\xee\x00\x39\xd1\x7d\x3a\xc7\x99\xe1\xf0\xe4\xfe\xa0\x24\xaf\x3c\x3a\x5e\x61\x86\xa5\x61\xa7\xde\xb0\xdf\x4e\x29\x24\xb5\xac\x61\x4b\xfb\x2f\x7c\x89\xa3\xdf\xa3\x66\x98\xf3\x94\x54\x94\x6b\x56\xa7\xb6\x91\x6c\xc1\x26\xba\x48\x23\x01\x09\xc2\x12\xd3\x82\x20\xe5\x05\x01\xe7\x37\xb9\x36\xae\xaa\xac\x39\x4d\xab\x1d\x6c\x5c\x81\x29\xdc\xbf\x99\xc8\xf2\xbf\xd4\x1b\xb4\xd2\x28\xcd\x30\x5c\x08\xd6\xe8\xdf\x8e\x8c\xc2\x14\xc2\xc2\x3a\x9d\x91\xb1\x15\x02\x71\x96\x52\xd5\x4e\x65\x85\xe2\x50\xba\xb9\x43\x0a\xd8\xdc\xf0\x12\x1d\x4d\x17\x34\x7a\x47\x77\x37\x41\x25\x3d\x2c\x68\xbd\x69\xe9\xac\x4d\x80\x95\xd3\x90\x55\xa6\x3f\x2d\x70\x5f\x6c\x19\x39\x1e\x76\xa4\x0d\x6c\x45\xf7\x32\x60\xb2\x1d\xa8\x31\xdb\x21\x62\xeb\x9b\x48\x87\x5c\x85\x76\xbd\x31\x1e\xa5\x22\x5f\xa5\xf6\x13\x69\x2d\x0f\xd4\x13\xbe\x83\x1d\x34\xf0\x8d\x8d\xcb\x73\xd0\xad\xbf\x71\x6d\x7d\x67\x54\x7f\x71\x63\x2c\x4e\x9f\x51\xb7\xbc\xed\xd4\x2a\xc7\xb6\x13\x43\xaf\x76\x97\x67\xd2\xfb\xee\x3c\x80\xcb\x51\x9c\x5d\x5b\x81\xdf\x2e\x54\x3f\x7d\x4e\x68\x5f\x84\xfd\xd9\xe0\x75\xff\xbd\xf7\x78\x3f\xfd\xee\x7c\x74\x5a\xe4\x69\x35\xc0\x47\xd8\x70\xcf\x63\xe7\xe5\x59\xf5\x16\x55\x3f\x94\x54\x13\xaf\x91\x48\x52\x17\xcf\xe7\x03\x7f\xc7\xab\xe7\x8e\x0e\xaa\x53\xbc\xe7\xda\x5a\x96\xd2\xc0\x70\x9c\x38\x50\x7a\x75\x8c\xb3\x3a\xef\x2e\x97\xe7\x9a\xfb\x39\x6c\x9e\xb4\x7c\xea\xfd\xdb\x2f\x3b\x5d\x32\xe5\xc1\x07\x0d\x18\xc7\xfc\xfe\x77\x91\xdd\xa3\xee\xf6\xce\x6d\xbb\x6f\xec\xb6\xa1\xf3\x5c\x7c\x7b\x56\x37\x6e\x9d\x74\xb2\xe5\xa3\xa6\xa7\x7b\x8d\x33\x4a\xbf\x4a\x9f\x2b\x65\x86\xaa\x7a\x5d\x84\xd4\xcb\x31\xec\x05\xa9\x7e\x4f\x66\x51\xd6\xce\x83\x3c\x76\xe3\x78\xfb\x91\xf7\x9b\x9f\xaa\x9f\xf3\x0a\xd3\x8e\x11\x9e\xf3\xaa\x0e\x68\xc2\xda\xe9\xbf\x9c\x68\xd8\x4b\x0d\x12\x9f\x67\xe8\xbb\xdd\x78\x9e\xa1\x69\x61\xa5\x87\x3b\xe3\xba\xd5\x07\x8c\xbf\xf2\xb6\x67\x31\x4f\xf7\x96\xdc\xee\x23\xb5\x19\xe5\xc2\xca\x51\xdc\xf9\x2a\x42\xc7\x7f\xac\xdc\x9f\x5f\xec\x90\xc1\xf7\xc9\x07\xc9\x80\xd6\xae\xb4\x39\x6a\x82\x3a\x30\x33\x5b\xfc\x64\x37\x17\x44\xd8\xfa\x2b\xdb\x9e\x8f\x5d\x83\xef\xec\x95\x8e\x48\xae\xb4\x56\xe9\x1a\x10\x32\x2c\xcb\xae\x79\x09\xb7\x39\x53\x1a\xc9\xb2\xcf\x27\x14\x8d\x4c\xca\x7c\x2c\x7b\xfa\x22\xb9\x9f\x28\xf6\xd7\x12\x62\x89\x52\xb8\x8d\x11\x76\xb4\xf3\xdb\xa9\x4c\xe8\x6d\x4e\x21\xcf\xab\x9f\xe5\x54\x5f\xe3\xab\x3f\xf3\xe6\xeb\xff\x5e\xa8\x1e\x6f\xdc\xe9\xb0\xf5\x85\x8b\x9e\x8f\x1e\xb4\xa1\xea\x7b\x2e\x07\xff\x76\xea\xf8\x9f\x3b\x89\x4c\x57\x8f\x57\xff\x0b\x00\x00\xff\xff\x8d\x97\xf1\xd7\xce\x35\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 13774, mode: os.FileMode(420), modTime: time.Unix(1537668594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
