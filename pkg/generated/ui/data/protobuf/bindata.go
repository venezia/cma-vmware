// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xd1\x4b\x9d\x4e\x22\xc6\xce\x5d\x9b\xb1\xeb\xb6\xae\x9d\x26\x9a\x24\xb6\xc7\x72\x92\xb9\x27\x0d\x04\xae\x48\x9c\x41\x80\x05\x40\x29\xea\x8d\xbf\x7b\x67\x01\x90\x22\x29\xca\x4e\x13\xdf\xcc\xe9\xe1\xce\xe4\xfe\xc1\xfe\xc7\x6f\x99\x24\x81\x73\x5d\x6e\x8c\xc8\x72\x07\x47\x2f\x0f\x5f\xc3\x8c\x15\xb6\x52\x19\xcc\x2e\x66\x70\x2e\x75\x95\xc2\x25\x73\x62\x85\x70\xae\x8b\xb2\x72\x42\x65\x70\x8b\xac\x00\x56\xb9\x5c\x1b\x3b\x19\x25\xc9\x28\x49\xe0\x83\xe0\xa8\x2c\xa6\x50\xa9\x14\x0d\xb8\x1c\xe1\xac\x64\x3c\xc7\x9a\xf2\x1c\x3e\xa3\xb1\x42\x2b\x38\x9a\xbc\x84\x03\x62\x18\x47\xd2\xf8\xd9\x09\xa9\xd8\xe8\x0a\x0a\xb6\x01\xa5\x1d\x54\x16\xc1\xe5\xc2\xc2\x52\x48\x04\xfc\xca\xb1\x74\x20\x14\x70\x5d\x94\x52\x30\xc5\x11\xd6\xc2\xe5\xfe\x9c\xa8\x85\x2c\x81\x5f\xa2\x0e\xbd\x70\x4c\x28\x60\xc0\x75\xb9\x01\xbd\x6c\x33\x02\x73\xd1\x68\xfa\xe5\xce\x95\xc7\x49\xb2\x5e\xaf\x27\xcc\x1b\x3c\xd1\x26\x4b\x64\x60\xb5\xc9\x87\xe9\xf9\x9b\xcb\xd9\x9b\x17\x47\x93\x97\x51\xe8\x93\x92\x68\x2d\x18\xfc\x4f\x25\x0c\xa6\xb0\xd8\x00\x2b\x4b\x29\x38\x5b\x48\x04\xc9\xd6\xa0\x0d\xb0\xcc\x20\xa6\xe0\x34\x19\xbd\x36\x82\xe2\xf6\x1c\xac\x5e\xba\x35\x33\x48\x6a\x52\x61\x9d\x11\x8b\xca\x75\x62\x56\x9b\x28\x6c\x87\x41\x2b\x60\x0a\xc6\x67\x33\x98\xce\xc6\xf0\xaf\xb3\xd9\x74\xf6\x9c\x94\x7c\x99\xde\xbe\xbb\xfa\x74\x0b\x5f\xce\x6e\x6e\xce\x2e\x6f\xa7\x6f\x66\x70\x75\x03\xe7\x57\x97\x17\xd3\xdb\xe9\xd5\xe5\x0c\xae\xfe\x0d\x67\x97\xbf\xc0\xfb\xe9\xe5\xc5\x73\x40\xe1\x72\x34\x80\x5f\x4b\x43\x1e\x68\x03\x82\xa2\x89\xa9\x0f\xdd\x0c\xb1\x63\xc2\x52\x07\x93\x6c\x89\x5c\x2c\x05\x07\xc9\x54\x56\xb1\x0c\x21\xd3\x2b\x34\x8a\x2a\xa1\x44\x53\x08\x4b\x59\xb5\xc0\x54\x4a\x6a\xa4\x28\x84\x63\xce\xbf\xda\xf1\x6b\x32\x22\x96\x8f\x82\xe7\x0c\x25\x7c\x46\x85\xff\x15\x0c\xfe\x56\xac\xc2\x5f\xff\xcc\x0a\x26\xe4\x84\xeb\xe2\xef\xa3\x91\xdd\x28\xc7\xbe\xc2\x29\x8c\x4b\xa3\x9d\x7e\x35\x3e\x19\x8d\x4a\xc6\xef\xc8\x02\x5e\xb0\x55\x41\x91\x3c\x19\x8d\x44\x51\x6a\xe3\x60\x9c\x69\x9d\x49\x4c\x58\x29\x12\xa6\x94\x8e\x36\x4c\xbc\xf0\xf8\xa4\x61\xf3\xcf\xfc\x45\x86\xea\x85\x5d\xb3\x2c\x43\x93\xe8\xd2\xb3\x0e\x8a\x8d\x46\x81\x0a\x07\x99\x29\xf9\x24\x63\x0e\xd7\x6c\x13\xc8\x7c\x9e\xa1\x9a\x47\x2d\x93\xa8\x65\xa2\x4b\x54\xac\x14\xab\xa3\x9a\xf2\x0c\x4e\xe1\xb7\x11\x80\x50\x4b\x7d\xec\xff\x02\x70\xc2\x49\x3c\x86\xf1\xb9\xac\xac\x43\x03\x1f\x99\x62\x19\x1a\xf8\xfc\xf1\x0b\x33\x08\xef\x50\x96\x68\xe0\xec\x7a\x3a\x3e\xf1\xfc\xab\xd0\x3b\xc7\x30\x5e\xbd\x9c\x1c\x4e\x5e\xc6\xd7\x5c\x2b\xc7\xb8\xab\xb5\xd2\x4f\xb1\x82\x14\xf7\x62\x1c\xf9\xe9\x57\x19\x79\x0c\x63\x2a\x7b\x7b\x9c\x24\x99\x70\x79\xb5\xa0\x90\x27\x36\x74\xfe\x0b\xae\xb8\x4b\x78\xc1\x5e\x84\x10\xb7\x44\x91\xd2\x73\x0c\xe3\xdd\x7c\x45\xa6\x7b\xfa\x9f\xff\x0f\x7e\x75\x68\x14\x93\xf3\x54\x73\x5b\xdb\xf7\x9d\x47\xa7\x68\xb9\x11\x3e\xbc\xe4\x99\x36\x08\x6c\xa1\x2b\x07\xdf\x16\xbd\xfb\x11\x80\xe5\x39\x16\x68\x8f\xe1\xdd\xed\xed\xf5\xec\xa4\xff\x86\x5e\x70\xad\x6c\xe5\xdf\x8c\x63\x3f\xd3\x81\xc9\xaf\x56\x2b\xaf\xa6\x34\x3a\xad\xf8\x3e\xfa\xfd\xc9\x68\x64\xd1\xac\x04\xc7\xc6\xac\xe0\x34\xb5\xa9\x90\x92\xe4\x57\xc2\x0f\x40\x06\x3c\x70\x78\xba\x29\x39\x9c\x1b\x64\x0e\x6b\xb9\x83\xce\xe3\x47\x9b\x3d\x03\x83\xae\x32\xca\xf6\x48\x37\x58\xca\xcd\xb3\x56\xf2\x9b\x5a\xf5\xbd\x30\x61\xa5\x98\x50\xb4\xeb\x0a\xdc\xfe\x4a\x6d\x1d\x1c\xc3\xd8\xb7\xcb\xea\x30\x89\x06\x8d\x3b\x4c\x0b\x9d\x6e\x88\xe9\xcf\xdb\xd7\xf7\x31\xcf\x1d\xcf\x0c\x3a\x23\x70\x15\xc6\x87\x75\xcc\x55\x96\x46\x6e\xe3\x26\x8d\x06\x10\xce\xc2\x5d\xb5\x40\xae\xd5\x52\x64\x7e\xba\x70\xad\x14\x72\x27\x56\xc2\x6d\x9a\x50\xbc\x45\xd7\xc4\x61\xfb\x77\x37\x08\xdb\xf7\xdf\x1f\x81\x0c\x1f\x0e\xc0\xa0\xa7\x29\x4a\x74\x38\x90\xc0\x0b\x4f\x68\x0c\xef\x3c\x76\x6d\xef\x90\xbe\xdf\xfc\x68\xc9\xff\xed\x41\x93\x2b\x06\x52\x58\x47\x79\x8a\x82\x76\x20\x05\x1f\x88\xe5\xa0\xfb\xbc\x2f\x15\x44\x7b\xea\x74\x24\x64\xe3\xe3\x1e\x55\x46\xd5\x13\xd2\x4f\x59\x53\xf8\xde\x8c\x53\x82\x95\x02\xa8\x35\x5b\xe9\x7a\x8b\x2e\xa2\x91\x69\x8b\xfd\x60\xfb\x7a\xc7\xc9\xf8\xfe\xc9\x1c\x8c\xe6\x3e\xe2\x1b\x4b\x7f\xad\xac\x03\xf6\xe0\xf0\x38\xf3\x4c\x31\x0b\x97\x3a\x45\x0b\x07\x9d\x77\x5d\x67\x3a\xa4\x1f\x98\x20\xd5\x93\x0e\x10\x4a\x61\x55\x66\x86\xa5\x18\x6d\xb0\x7e\x46\x30\xc8\xc4\x0a\xd5\x8e\xd3\x6f\xd1\x7d\x0a\xec\xd1\x93\x7e\x22\xf7\x52\x77\x52\xbb\x97\xf3\xc9\xab\x39\x3a\xf8\x58\xd2\x9d\xc3\xa2\x74\x04\x1e\xeb\x88\xec\x26\xbd\x6b\x34\x1c\x74\x9f\xbb\x3e\x76\x69\x4f\x9d\xf2\x5d\xaf\x1e\x4b\xfd\xfd\x68\x54\xa0\xb5\x04\xe4\xfa\x37\xdd\xf6\xce\xbc\x64\x05\xd6\xc0\xbd\xbe\x47\x9c\x86\x05\x6e\x7b\x01\x53\xcf\x4c\x30\x59\x65\x1e\xf8\xc0\x29\x1c\x9e\xd4\x1a\x6e\x73\x6c\xa6\x82\x5e\xc2\xfb\x6a\x81\x46\xa1\xc3\x50\x58\x6b\x6d\xee\xd0\x80\xa2\x7e\x99\xc0\xb9\x56\xce\x68\x09\xa5\x64\xaa\x91\xb2\x40\x68\x22\x45\x47\x28\x57\x05\xa8\x4f\xe6\x7c\x64\x3c\x17\x0a\x67\x25\xf2\x49\xdb\x82\xbb\xd7\x76\x5e\x1f\x78\x0a\x47\x8d\x21\x5f\x72\xf4\xc0\x5b\x1b\xbf\xdb\xb4\x3d\x12\x16\xde\x9d\x8d\x42\xc0\xb4\x84\x5c\x64\xf9\x9c\xad\x98\x90\x6c\x21\xa4\x70\x1b\x38\x85\x57\x1d\x87\x96\x6c\x61\x04\x8f\x91\xa8\x6c\x2f\x04\xe8\xc8\xad\x79\x64\x3a\x85\x9f\x1a\xd9\x68\xb3\x85\x75\x2e\x78\xee\xf7\x28\x23\x2c\xb6\x8d\x09\xb5\x85\x25\x65\x24\x8d\x58\xaa\xe5\xaa\x07\x9b\x46\xcb\xb9\x8f\xd1\xdc\x07\x0e\x4e\xe1\xe7\xa7\x3c\x22\x24\xa5\xd1\xfd\x97\x96\xeb\xc2\x82\xcd\x75\x25\x53\x72\x9c\xc1\x8a\xc9\x0a\x41\x8a\x3b\x04\x51\x1e\x7b\x68\xef\x72\xe6\x60\x4d\x1d\x14\x38\x84\x71\x15\x93\x30\xbd\x4e\x88\x5c\x6b\xba\x66\x96\xd6\xd4\x05\xe3\x77\x14\xc5\x1a\xa7\x02\xaf\xac\xd3\x05\x1a\x1b\x63\xeb\xb7\x39\xa7\xc9\x8d\xa2\x52\x84\xf6\xfc\x63\xdf\x99\x18\x79\x56\x8a\x39\xaa\xb4\xd4\x42\x39\x38\x85\xbf\x36\x86\x5f\x1b\xb1\x22\xd1\x3b\xdc\xf8\x74\x91\x0e\x6b\x73\x10\xca\x69\x28\x62\xc4\xda\x9a\xca\x20\x30\x27\x81\x53\x78\x7d\xb2\xb7\x5b\x7c\x1f\xb7\x30\xe6\xfe\x22\x5b\x33\xdb\x6e\x9a\x50\xc6\x22\xac\xb0\x68\xdd\xb6\xfc\xf4\xdd\x4e\x03\xa5\xe8\x98\x90\xb6\xdf\x89\x51\x14\x0c\xda\x52\x2b\x8b\x5e\xa4\x9e\xa0\x0e\x8b\x86\xd1\xf7\x41\xcb\x85\x0e\xa4\xfb\x96\x6e\x97\x5a\xdf\xd1\x8a\x5c\x0e\xf7\xfa\xa0\xea\x5e\x68\xa6\xb6\xdb\x73\x2a\x00\xd5\x8d\x75\x58\xec\x3a\xdf\x76\xe5\xc2\x7b\xff\xa0\x43\x7d\xa8\xd7\xce\x08\x73\xd4\xe0\xad\xb3\xff\x64\x83\xe9\x4e\xd3\x52\xe3\x8c\xde\x3c\xea\xd5\x2e\x5e\xdc\x9e\x70\xee\xfb\xa1\xed\xdb\x02\x6b\xc5\x71\x32\x0c\xe5\x75\xd6\x40\x74\x12\x6d\x57\x41\x34\x24\x62\xf8\xfd\xb9\x8b\x38\x10\x7e\xdb\x4f\xfe\xa1\x1c\x44\xa1\x0f\x83\x08\xb5\x1e\x1f\x03\xe5\xb6\x6b\x73\x9b\x69\x6b\xcc\x45\xaf\xd6\xda\xce\x8b\xb4\x63\xc3\x40\x65\x0e\xe4\xac\x3d\xec\xb7\x59\xb7\x9d\x40\x0f\x48\x37\x81\x7e\x35\x64\x74\xab\xfa\xfe\xd8\xa6\x0f\xc8\xb7\x56\x3d\x3f\x44\xfd\xa6\xf7\xc0\x00\x6d\xf1\xfb\x6b\xab\x15\x8d\xed\xc5\xfd\x81\x2d\x50\x6e\x63\x41\xf3\x49\x45\x1f\x19\x48\x22\x3e\x0e\x08\xfc\xbd\x31\x2c\x10\x68\x75\x05\x45\x81\xfa\xf3\x57\x40\x96\x01\x92\x36\x9f\xc4\xe8\xa2\x6a\xec\xdc\xbd\xce\x3a\x96\x56\x96\x2e\x9a\x22\x7c\x58\x9b\xcd\xde\x01\xe3\x1c\x6d\x67\xf6\x37\x2c\x7d\xab\x73\x5a\xd7\xf7\xcb\x79\x72\x3b\x93\x24\xe3\xef\xc4\x01\x19\xa1\xdc\xab\xa3\x40\xed\x83\x8b\xbb\xd7\xb6\x41\x4c\xf5\xe7\x3f\xde\x46\x46\x93\x70\x11\x93\xdb\x94\x68\xad\xe4\x06\x18\x14\x2c\xf4\xf4\xb2\xfe\x64\x8b\x32\xf5\x5f\x30\x71\x49\xb0\xa9\x83\x91\x4a\x66\xed\x5a\x9b\xb4\x03\x4e\xe8\x6c\x9f\x0d\xdb\x1c\xdb\xb9\x1a\x9b\x96\xef\x97\x42\x14\xf2\x28\xe4\x7e\xe4\x73\xf6\x16\x5d\x1b\xf5\x9d\x5d\x4f\x61\x16\x96\xbf\xd6\x9c\xda\x6e\x79\x61\x84\x25\x09\x84\x79\x45\xc7\xd7\xd2\xf5\x60\xdc\x95\xeb\xcf\xb6\x25\xe8\x12\x4d\xa8\x10\xba\x6c\xaf\xde\xef\xb9\x56\x9a\x52\xd9\x5d\x3e\xb7\x50\x3b\x06\xc4\xb1\x0c\x74\x18\x93\x99\xa0\x9b\xb6\xd4\x56\x38\x6d\x36\x0d\x63\x0c\x69\x26\x5c\x0b\x76\x1e\x9e\xf4\x15\xe5\xcc\xe6\x75\x23\x93\x26\x42\x34\xc2\x0d\x69\x09\x94\x6d\x25\xed\x87\x16\xce\x20\x7a\x57\xb9\x44\xa6\x60\x9d\xa3\x82\x45\x25\xe4\xa0\x5a\x62\x9e\xd3\xbc\xc0\x6d\xc5\x45\xd5\x17\xf4\x52\x2f\xbd\x6c\xda\x97\xf5\x2f\xe7\x69\x90\xfb\xa9\x23\xf7\x79\x9b\xe1\x4c\x37\xc0\x8a\x20\xa7\x90\xb8\x63\x83\x6e\xc5\xe7\xe7\x8e\x9e\xf3\x20\x61\xb6\x50\xba\x25\xc7\x6b\x62\x83\x44\x6b\x50\x27\x99\xa3\xcc\x81\x70\x21\x08\x81\x31\xf5\xe5\x93\x80\xa9\x94\xff\x3a\xae\x55\x5f\x63\x59\x0b\x36\x10\xf1\x7e\x34\xea\xb9\xd4\x2a\x0a\x4f\x1a\xa8\x95\xe8\xcd\xbc\xfd\xad\x63\xe0\xb2\x7e\x68\x05\x7e\x10\xa6\x44\x28\x8d\x7e\xff\xe1\x5a\x59\x91\xa2\xb7\x9f\xfc\x8b\xeb\xde\xb7\xc0\xb1\x87\x37\xeb\x16\x8e\x61\xaa\x8f\x62\xe2\x29\xfb\x41\x8c\x37\xbb\xb3\xa8\x95\xda\x5a\x41\xa8\x3d\xfc\x6b\x96\xd2\xeb\xee\xf0\xa8\xa7\x7c\x2d\xd3\x8f\xd8\xce\x0a\xfd\x3b\xc5\x68\xc0\x01\xaf\x64\x5d\x7b\x4d\xec\x4e\xff\xa3\x73\x35\xb5\xd7\xca\xbd\x36\xf7\x57\x02\x66\xc3\x44\x66\x60\x2b\x7f\x01\x2c\x2b\xb9\x1f\xf5\xb7\xd4\xf6\x3f\x1f\xfd\xbe\x91\xe8\x2d\x8e\x6b\x9a\x2c\xca\x83\x05\x96\xa6\x43\x98\xe1\x81\x0d\x92\xa5\x69\xb3\x3e\x1e\x7d\xc3\x09\x06\x0b\xbd\x42\x58\x1a\x5d\x3c\x76\xcc\x8d\x67\x6d\x1f\x16\x84\x9b\xf3\x5e\xf5\xa7\xfc\x1e\xb1\x9d\x51\xbf\xef\x7a\xdf\xbd\xe2\x0f\x9b\xa9\xb1\x2f\x5b\x3f\x5a\x03\xff\x0b\x00\x00\xff\xff\x40\xc6\x7a\x26\x12\x1e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7698, mode: os.FileMode(420), modTime: time.Unix(1537668577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
